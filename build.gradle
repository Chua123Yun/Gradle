plugins {
id 'java'
}
group 'com.example'
version '1.0-SNAPSHOT'
repositories {
mavenCentral()
}
dependencies {
// Add JUnit dependency for testing
testImplementation 'junit:junit:4.13.2'
}




// Define a task to Run a Test
task RunTest(type: Test) {
// Specify the directory containing test classes
testClassesDirs = sourceSets.test.output.classesDirs
// Optionally configure test options

testLogging {
// Configure which events to log during test execution
events 'passed', 'skipped', 'failed'
}
}
// Define a task to build an executable JAR file
task BuildJar(type: Jar) {
manifest {
attributes 'Main-Class': 'com.example.Main' // Set the main class for the JAR
}
from sourceSets.main.output // Include compiled classes in the JAR
archiveBaseName = 'my-application' // Name of the JAR file
destinationDirectory = file('build/libs') // Output directory for the JAR file
}
// Task to copy resource files to a specific directory
task copyResources(type: Copy) {
from 'src/main/resources'
into 'build/resources/main'
}
// Task to create a zip archive of the project
task createZip(type: Zip) {
from 'build'
archiveFileName = 'project-name.zip'
destinationDirectory = file('build/distributions')
}
// Task push build folder to GitHub
task pushToGitHub(type: Exec) {
    workingDir file('C:/Users/yami/Desktop/HelloWrold') // Ensure this is the root project directory

    // Initialize git
    commandLine 'git', 'init'
    standardOutput = new FileOutputStream('git-init.log')
    errorOutput = new FileOutputStream('git-init-error.log')
    exec()
    
    // Add all files
    commandLine 'git', 'add', '.'
    standardOutput = new FileOutputStream('git-add.log')
    errorOutput = new FileOutputStream('git-add-error.log')
    exec()
    
    // Commit the changes
    commandLine 'git', 'commit', '-m', 'Automated deployment'
    standardOutput = new FileOutputStream('git-commit.log')
    errorOutput = new FileOutputStream('git-commit-error.log')
    exec()
    
    // Set the branch name
    commandLine 'git', 'branch', '-M', 'main'
    standardOutput = new FileOutputStream('git-branch.log')
    errorOutput = new FileOutputStream('git-branch-error.log')
    exec()
    
    // Add the remote repository
    commandLine 'git', 'remote', 'add', 'origin', 'https://github.com/Chua123Yun/Gradle.git'
    standardOutput = new FileOutputStream('git-remote.log')
    errorOutput = new FileOutputStream('git-remote-error.log')
    exec()
    
    // Push to the remote repository
    commandLine 'git', 'push', '-u', 'origin', 'main'
    standardOutput = new FileOutputStream('git-push.log')
    errorOutput = new FileOutputStream('git-push-error.log')
    exec()
}

